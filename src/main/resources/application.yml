# For standard Spring Boot parameters see:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
server:
  servlet:
    context-path: /correlation
  port: 8084
    
## use create when running the app for the first time
## then change to "update" which just updates the schema when necessary
#spring.jpa.hibernate.ddl-auto=create
spring:
  boot:    admin:      context-path: /admin
      ui:        title: SD Multi Layer Cache
  
  jpa:
    #database-platform: org.hibernate.dialect.Oracle10gDialect
    show-sql: true
    open-in-view: true
  datasource: 
    url: jdbc:oracle:thin:@es1prerac03-scan:1521/PROTMPRE_SRV.sp.securitasdirect.local
    username: RS_SCORR
    password: RS_SCORR
    driver-class-name: oracle.jdbc.OracleDriver
    tomcat:      max-active: 100
    hikari:      maximum-pool-size: 100    dbcp2:      max-total: 100
      
    
  cache:
    two-layer: ${TWO_LAYER_CACHE}    
    caffeine:
      active: true
      configurations:
        - cacheName: cameras/ByCountryAndInstallation
          #initialCapacity:
          maximumSize: 200000
          #maximumWeight:
          #expireAfterAccess: #SECONDS
          #expireAfterWrite: #SECONDS
          #refreshAfterWrite: #SECONDS
          #concurrencyLevel:
        - cacheName: cameras/ByCountryAndInstallationAndZone
          #initialCapacity:
          maximumSize: 200000
          #maximumWeight:
          #expireAfterAccess: #SECONDS
          #expireAfterWrite: #SECONDS
          #refreshAfterWrite: #SECONDS
          #concurrencyLevel:
        - cacheName: cameras/BySerial
          #initialCapacity:
          maximumSize: 200000
          #maximumWeight:
          #expireAfterAccess: #SECONDS
          #expireAfterWrite: #SECONDS
          #refreshAfterWrite: #SECONDS
          #concurrencyLevel:
        - cacheName: cameras/all
          #initialCapacity:
          maximumSize: 20000
          #maximumWeight:
          #expireAfterAccess: #SECONDS
          #expireAfterWrite: #SECONDS
          #refreshAfterWrite: #SECONDS
          #concurrencyLevel:
        - cacheName: voss/ByCountryAndInstallation
          #initialCapacity:
          maximumSize: 200000
          #maximumWeight:
          #expireAfterAccess: #SECONDS
          #expireAfterWrite: #SECONDS
          #refreshAfterWrite: #SECONDS
          #concurrencyLevel:
    redis:
      time-to-live: 
        seconds: -1    
      cache-null-values: false  
           
  redis:
    database: 1 # Database index used by the connection factory.
    host: ${REDIS_HOST} # Redis server host 192.168.99.100
    port: ${REDIS_PORT} # Redis server port 6379 
    password: ${REDIS_PASSWORD} # Login password of the redis server.
    ssl: ${REDIS_SSL} # Enable SSL support.
    timeout: 2000 # Connection timeout in milliseconds.
    pool:
      enabled: true
    jedis:      pool:        max-active: -1 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
        max-idle: -1 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
        max-wait: -1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
        min-idle: 0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
    cluster:
      enabled: false
      max-redirects: 10 # Maximum number of redirects to follow when executing commands across the cluster.
      nodes: ${REDIS_CLUSTER_NODES} # Comma-separated list of "host:port" pairs to bootstrap from. pre-cam-scorr-cache.ilqfxs.ng.0001.euw1.cache.amazonaws.com:6379
    sentinel:
      enabled: false
      master: mymaster # Name of Redis server.
      nodes: 127.0.0.1:27379 # Comma-separated list of host:port pairs.
 
# =========================
# HEALTH INDICATORS
# =========================
management:
  endpoints:
    web:      exposure:        include: "*"
  health:
    defaults:
      enabled: true # Enable default health indicators
    db:
      enabled: true # Enable database health check
    diskspace:
      enabled: true # Enable disk space health check
      path: / # Path used to compute the available disk space
      threshold: 0 # Minimum disk space that should be available, in bytes
    redis:
      enabled: true # Enable Redis health check
    status:
      order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity 
  endpoint:
    health:
      enabled: true
    caches:      enabled: true
    logfile:      enabled: true
    metrics:      enabled: true 
    loggers:      enabled: true
    prometheus:      enabled: true